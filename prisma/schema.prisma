// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum LessonStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RequestStatus {
  REQUESTED
  AWAITING_PAYMENT
  CONFIRMED
  REJECTED
  LATE_RESPONSE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Student {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId 
  email          String           @unique
  name           String
  language       String?
  phone          String
  birthDate      DateTime?
  country        String?
  hasLicense     Boolean?
  hasRoadTest    Boolean?
  learnerPermitUrl String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  licenses       License[]
  lessonRequests LessonsRequest[]
  roadTests      RoadTest[]
  lessons        Lesson[]

  @@map("students")
}

model Instructor {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  languages      String[]
  phone          String
  email          String           @unique
  password       String
  licenseNumber  String?
  experienceYears Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  availability   Availability[]
  lessonRequests LessonsRequest[]
  lessons        Lesson[]

  @@map("instructors")
}

model Availability {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  instructorId String      @db.ObjectId
  startTime    String
  endTime      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  instructor Instructor @relation(fields: [instructorId], references: [id])

  @@map("availability")
}

model Location {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  city      String
  zip       String

  lessons        Lesson[]
  lessonRequests LessonsRequest[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("locations")
}

model Plan {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  lessons     Int
  price       Float
  time        Int   /* Minutes */
  planClasses PlanToClass[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("plans")
}

model PlanClass {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String        // Por ejemplo: "Class 7", "Class 5", etc.
  title       String        
  description String?       // Descripción opcional del tipo de clase
  plans       PlanToClass[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("plan_classes")
}

model PlanToClass {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  planId      String    @db.ObjectId
  planClassId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  plan      Plan      @relation(fields: [planId], references: [id])
  planClass PlanClass @relation(fields: [planClassId], references: [id])

  @@index([planId])
  @@index([planClassId])
  @@map("plan_to_classes")
}

model License {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @unique @db.ObjectId
  licenseType    String
  licenseNumber  String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@map("license")
}

model LessonsRequest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String        @db.ObjectId
  instructorId  String        @db.ObjectId
  lessonDate    DateTime
  startTime     String
  endTime       String
  lessonDuration String
  lessonLocation String        @db.ObjectId
  lessonPlan    String
  lessonPrice   String
  lessonStatus  RequestStatus
  licenseClass  String        // Tipo de clase (Clase 4, Clase 7, etc.)
  paymentMethod String?       // Método de pago (opcional)
  trackingNumber String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  student    Student    @relation(fields: [studentId], references: [id])
  instructor Instructor @relation(fields: [instructorId], references: [id])
  location   Location   @relation(fields: [lessonLocation], references: [id])

  @@map("lessonsRequest")
}

model RoadTest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  city      String
  address   String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@map("road_test")
}

model TransitTime {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fromCity  String
  toCity    String
  time      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@unique([fromCity, toCity]) 
  @@map("transit_time")
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  startTime String
  endTime   String
  duration  String

  @@map("schedule")
}

model Lesson {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String        @db.ObjectId
  instructorId   String        @db.ObjectId
  date           DateTime
  startTime      String
  endTime        String
  duration       String
  locationId     String        @db.ObjectId
  plan           String
  price          String
  status         LessonStatus
  paymentStatus  PaymentStatus
  licenseClass   String        // Tipo de clase (Clase 4, Clase 7, etc.)
  paymentMethod  String?       // Método de pago (opcional)
  trackingNumber String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  student    Student    @relation(fields: [studentId], references: [id])
  instructor Instructor @relation(fields: [instructorId], references: [id])
  location   Location   @relation(fields: [locationId], references: [id])

  @@map("lessons")
}
